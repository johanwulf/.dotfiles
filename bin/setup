#!/bin/bash
if [[ $OSTYPE != 'darwin'* ]]; then
    echo "Only runnable on macOS"
    exit 1
fi

clear
echo -e "\033[1;34mjohanwulf setup\033[0m"
echo ""
echo "This script will set up Homebrew, packages and config files"
echo "If you do not know what you are doing, do not proceed"
echo " "
echo -e "\033[1;31mProceeding will install Homebrew and package gum\033[0m"
echo " "
read -p "Press enter if you wish to continue"
echo " "
echo "Installing Homebrew and gum..."

which -s brew

if [[ $? != 0 ]]; then
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" > /dev/null
  eval "$(/opt/homebrew/bin/brew shellenv)"
  echo "✅ Brew installed"
  brew install gum > /dev/null
  echo "✅ gum installed"
else
  which -s gum
  if [[ $? != 0 ]]; then
    brew install gum > /dev/null
    echo "✅ gum installed"
  fi
fi

echo " "
echo -e "\033[1;31mProceeding with installation will back up and move the following files\033[0m"
echo "~/.config/*"
echo "~/.zshrc"
echo "~/.hushlogin"
echo "~/.dotfiles/*"
echo " "

gum confirm "Do you wish to continue?" && echo "" || exit 0
gum spin --spinner dot --title "Backing up files..." -- /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/johanwulf/.dotfiles/main/bin/dotfiles_backup)"
echo "✅ Files backed up"

gum spin --spinner dot --title "Cloning .dotfiles repository" -- git clone --bare https://github.com/johanwulf/.dotfiles.git $HOME/.dotfiles
/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $@ checkout
/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $@ config status.showUntrackedFiles no
/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $@ remote set-url origin git@github.com:johanwulf/.dotfiles.git
echo "✅ Dotfiles cloned"

gum spin --spinner dot --title "Running brew update..." -- brew update
echo "✅ brew updated"
gum spin --spinner dot --title "Running brew upgrade..." -- brew upgrade
echo "✅ brew upgraded"
gum spin --spinner dot --title "Installing brew bundle packages..." -- brew bundle --file=$HOME/.config/Brewfile
echo "✅ brew packages installed"

nvm install --lts
nvm use --lts

echo "✅ Setting up 1Password SSH integration"
echo ""
echo "Please complete the following steps:"
echo "1. Open 1Password and sign in"
echo "2. Go to 1Password Settings > Developer"
echo "3. Enable 'Use the SSH agent'"
echo "4. Enable 'Integrate with 1Password CLI'"
echo ""
gum confirm "Have you completed these steps?" || exit 1

if op account list &>/dev/null; then
    echo "✅ 1Password CLI is already authenticated"
else
    echo "Please sign in to 1Password CLI:"
    eval $(op signin)
fi

mkdir -p ~/.ssh
chmod 700 ~/.ssh

echo "Host *
    IdentityAgent \"~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock\"" > ~/.ssh/config
chmod 600 ~/.ssh/config

echo "✅ 1Password SSH agent configured"

echo "Fetching SSH keys from 1Password..."

SSH_KEYS=$(op item list --categories "SSH Key" --format json | jq -r '.[].title')

if [[ -n "$SSH_KEYS" ]]; then
    KEY_NAME=$(echo "$SSH_KEYS" | gum choose --header "Select SSH key to download:")
    if [[ -n "$KEY_NAME" ]]; then
        echo "Using SSH key: $KEY_NAME"
        op read "op://Private/$KEY_NAME/private key" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        op read "op://Private/$KEY_NAME/public key" > ~/.ssh/id_ed25519.pub
        chmod 644 ~/.ssh/id_ed25519.pub
        echo "✅ SSH keys downloaded from 1Password"
    else
        echo "⚠️  No key selected"
    fi
else
    echo "⚠️  No SSH keys found in 1Password"
    echo "You can either:"
    echo "1. Use 1Password's SSH agent (already configured above)"
    echo "2. Generate a new key: ssh-keygen -t ed25519 -C \"your.email@example.com\""
fi

echo "✅ Updating macOS settings"

defaults write -g NSAutomaticPeriodSubstitutionEnabled -bool false
defaults write com.apple.dock "orientation" -string "right"
defaults write com.apple.dock "tilesize" -int "24"
defaults write com.apple.dock "autohide" -bool "true"
defaults write com.apple.dock "show-recents" -bool "false"
defaults write com.apple.dock "static-only" -bool "true"
defaults write NSGlobalDomain AppleShowAllExtensions -bool true
defaults write com.apple.finder "AppleShowAllFiles" -bool "false"
defaults write com.apple.finder "FXEnableExtensionChangeWarning" -bool "false"
defaults write com.apple.dock "mru-spaces" -bool "false"
defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false
defaults write com.apple.finder "AppleShowAllFiles" -bool "true"
defaults write com.apple.screencapture "disable-shadow" -bool "true"

# Remove all dock icons (only show running apps)
defaults write com.apple.dock persistent-apps -array
defaults write com.apple.dock persistent-others -array

# Reduce motion
defaults write com.apple.universalaccess reduceMotion -bool true
defaults write com.apple.Accessibility ReduceMotionEnabled -bool true

# Key repeat settings
defaults write -g KeyRepeat -int 1
defaults write -g InitialKeyRepeat -int 10

# Trackpad right-click in bottom corner
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1
defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true

# Show Bluetooth in menu bar
defaults write com.apple.controlcenter "NSStatusItem Visible Bluetooth" -bool true
defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" 2>/dev/null || true

# Show full path in Finder title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

# Show battery percentage
defaults write com.apple.menuextra.battery ShowPercent -bool true

# Screenshots to clipboard by default
defaults write com.apple.screencapture target -string "clipboard"

# Disable hot corners
defaults write com.apple.dock wvous-tl-corner -int 0
defaults write com.apple.dock wvous-tr-corner -int 0
defaults write com.apple.dock wvous-bl-corner -int 0
defaults write com.apple.dock wvous-br-corner -int 0

# Disable startup sound
sudo nvram StartupMute=%01

# Caps Lock to Escape
hidutil property --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x700000039,"HIDKeyboardModifierMappingDst":0x700000029}]}'

bash ~/bin/create-finder-terminal-service.sh 2>/dev/null || true

killall Finder
killall Dock

echo ""
echo "🎆 Setting up desktop spaces..."
gum confirm "Ready to set up 7 desktop spaces with your applications?" && bash ~/bin/setup-spaces.sh || echo "⚠️  Skipping space setup"

echo ""
echo "🎉 Setup complete!"
echo ""

gum confirm "Restart now to apply all settings?" && sudo shutdown -r now || echo "Remember to restart later for all settings to take effect"
